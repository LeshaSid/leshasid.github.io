// ================== –û–ë–©–ò–ï –§–£–ù–ö–¶–ò–ò ==================
function playSound(url) {
  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞
  console.log("Playing sound:", url);
}

// ================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ==================
let navButtons, screens;
const gamesCompleted = {
  marketing: false,
  memory: false,
  cards: false,
  detective: false
};
const BOX_CODES = ["1984", "LAMP", "TOWE", "FINA"];

function startGames() {
  const welcomeScreen = document.getElementById('welcomeScreen');
  const container = document.getElementById('container');
  
  if (welcomeScreen && container) {
    welcomeScreen.classList.remove('active');
    container.style.display = 'block';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    initNavigation();
    
    if (navButtons && navButtons.marketing) {
      navButtons.marketing.click();
    }
  }
}

function initNavigation() {
  navButtons = {
    marketing: document.getElementById('navMarketing'),
    memory: document.getElementById('navMemory'),
    cards: document.getElementById('navCards'),
    detective: document.getElementById('navDetective'),
  };

  screens = {
    marketing: document.getElementById('marketingGame'),
    memory: document.getElementById('memoryGame'),
    cards: document.getElementById('cards'),
    detective: document.getElementById('detective'),
  };

  Object.entries(navButtons).forEach(([key, btn]) => {
    if (btn) {
      btn.addEventListener('click', () => {
        if (canAccessGame(key)) {
          Object.values(navButtons).forEach(b => b && b.classList.remove('active'));
          Object.values(screens).forEach(s => s && s.classList.remove('active'));
          
          btn.classList.add('active');
          if (screens[key]) {
            screens[key].classList.add('active');
          }
          
          if (key === 'marketing') startMarketingGame();
          if (key === 'memory') resetMemoryGame();
          if (key === 'cards') initAilaGame();
          if (key === 'detective') initDetectiveGame();
        }
      });
    }
  });
}
function canAccessGame(gameKey) {
  if (location.search.includes('debug')) return true;
  
  const gameOrder = ['marketing', 'memory', 'cards', 'detective'];
  const currentIndex = gameOrder.indexOf(gameKey);
  
  if (gamesCompleted[gameKey]) return true;
  
  for (let i = 0; i < currentIndex; i++) {
    if (!gamesCompleted[gameOrder[i]]) return false;
  }
  
  return true;
}

function showBoxAnimation(boxNumber) {
  const boxAnimation = document.getElementById('boxAnimation');
  if (!boxAnimation) return;
  
  const boxMessages = [
    "–ö–æ—Ä–æ–±–∫–∞ 1: –ö–ª—é—á –∫ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º",
    "–ö–æ—Ä–æ–±–∫–∞ 2: –õ–∞–º–ø–∞ –∑–Ω–∞–Ω–∏–π",
    "–ö–æ—Ä–æ–±–∫–∞ 3: –ö–∞—Ä—Ç–∞ –ø—É—Ç–∏",
    "–ö–æ—Ä–æ–±–∫–∞ 4: –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥"
  ];
  
  boxAnimation.textContent = `üéâ ${boxMessages[boxNumber-1]} –æ—Ç–∫—Ä—ã—Ç–∞!`;
  boxAnimation.style.display = 'block';
  
  // –ê–Ω–∏–º–∞—Ü–∏—è
  boxAnimation.style.animation = 'openBox 1.5s ease';
  
  // –°–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    boxAnimation.style.display = 'none';
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ
    switch(boxNumber) {
      case 1:
        if (navButtons && navButtons.memory) {
          navButtons.memory.click();
        }
        break;
      case 2:
        if (navButtons && navButtons.cards) {
          navButtons.cards.click();
        }
        break;
      case 3:
        if (navButtons && navButtons.detective) {
          navButtons.detective.click();
        }
        break;
      case 4:
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        document.getElementById('finalAnimation').classList.add('show');
        break;
    }
  }, 3000);
}

function closeFinalAnimation() {
  document.getElementById('finalAnimation').classList.remove('show');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
  initNavigation();
  
  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏
  if (location.search.includes('debug')) {
    Object.keys(gamesCompleted).forEach(k => gamesCompleted[k] = true);
    console.log("–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - –≤—Å–µ –∏–≥—Ä—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã");
  }
});