// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
const gameState = {
  chapter: "prologue",
  health: 8,
  maxHealth: 12,
  energy: 5,
  maxEnergy: 10,
  coins: 3,
  food: 2,
  knowledge: 0,
  strength: 2,
  storyFlags: {},
  inventory: [],
  companions: [],
  enemies: [],
  cards: {
    hand: [],
    active: [],
    deck: [
      {id: "hide", name: "–£–∫—Ä—ã—Ç–∏–µ", type: "action", effect: "–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è –æ—Ç –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"},
      {id: "leo", name: "–õ—ë—à–∞", type: "companion", effect: "–î–∞–µ—Ç +1 –∫ –±—Ä–æ—Å–∫–∞–º –∫—É–±–∏–∫–∞"},
      {id: "food", name: "–ü—Ä–∏–ø–∞—Å—ã", type: "resource", effect: "+2 –µ–¥—ã –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏"},
      {id: "map", name: "–ö–∞—Ä—Ç–∞ –∫–ª–∞–¥–±–∏—â–∞", type: "special", effect: "–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–≥–∞–¥–æ–∫"},
      {id: "key", name: "–•—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π –∫–ª—é—á", type: "special", effect: "–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–∞—à–Ω—é"},
      {id: "sword", name: "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á", type: "weapon", effect: "+1 –∫ —Å–∏–ª–µ –≤ –±–æ—é"},
      {id: "shield", name: "–õ–∏—Å—Ç-—â–∏—Ç", type: "armor", effect: "+1 –∫ –∑–∞—â–∏—Ç–µ"}
    ],
    discard: []
  },
  currentEnemy: null,
  mineProgress: 0,
  spiderHealth: 5,
  riddlesSolved: 0,
  towerChallengePassed: false,
  bmzWorked: false
};

const enemies = {
  forest: [
    {name: "–°—Ç—Ä–∞–Ω–Ω—ã–µ –¥–µ—Ç–∏", health: 3, strength: 1, reward: "food", image: "strangekids.jpg"},
    {name: "–ö—Ä–∞–ø–∏–≤–∞", health: 2, strength: 1, reward: "knowledge", image: "nettle.png"},
    {name: "–ë–∞–±–∫–∏", health: 4, strength: 2, reward: "coins", image: "grannies.jpg"}
  ],
  factory: [
    {name: "–û—Ö—Ä–∞–Ω–Ω–∏–∫", health: 4, strength: 2, reward: "coins", image: "guard.jpg"},
    {name: "–î–∏—Ä–µ–∫—Ç–æ—Ä", health: 5, strength: 3, reward: "key_part", image: "director.jpg"},
    {name: "–°—É–º–∞—Å—à–µ–¥—à–∏–π —Å—Ç–∞–Ω–æ–∫", health: 6, strength: 4, reward: "energy", image: "crazymachine.jpg"}
  ],
  mine: [
    {name: "–ì–æ–ø–Ω–∏–∫", health: 6, strength: 4, reward: "silk", image: "gopnik.jpg"},
    {name: "–ú—É—Ç–Ω—ã–π —Ç–∏–ø", health: 7, strength: 5, reward: "ore", image: "mutnitip.jpg"},
    {name: "–ß—É–≤–∞–∫, –∫–æ—Ç–æ—Ä—ã–π –¥–µ—Ä–∂–∏—Ç –≤ —Å—Ç—Ä–∞—Ö–µ –≤–µ—Å—å —Ä–∞–π–æ–Ω", health: 8, strength: 6, reward: "strength", image: "https://via.placeholder.com/150?text=–ß—É–≤–∞–∫"}
  ],
  tower: [
    {name: "–°—Ç—Ä–∞–∂ –±–∞—à–Ω–∏", health: 8, strength: 6, reward: "final_key", image: "https://via.placeholder.com/150?text=–°—Ç—Ä–∞–∂+–±–∞—à–Ω–∏"},
    {name: "–ò–ª–ª—é–∑–∏—è —Å—Ç—Ä–∞—Ö–∞", health: 9, strength: 7, reward: "knowledge", image: "https://via.placeholder.com/150?text=–ò–ª–ª—é–∑–∏—è+—Å—Ç—Ä–∞—Ö–∞"},
    {name: "–ü–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å", health: 10, strength: 8, reward: "victory", image: "https://via.placeholder.com/150?text=–ò—Å–ø—ã—Ç–∞—Ç–µ–ª—å"}
  ]
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initAilaGame() {
  const cardsScreen = document.getElementById('cards');
  if (!cardsScreen) return;
  
  cardsScreen.innerHTML = `
    <h2>–ú–∏–Ω–∏-–∏–≥—Ä–∞ 3: –≠–π–ª–∞ –∏ –î–∞–ª—ë–∫–∏–π –°–≤–µ—Ç</h2>
    <div id="ailaGame">
      <div class="game-header">
        <img src="tonyarabbit.png" alt="–¢–æ–Ω—è" class="character-image">
        
        <div class="resources">
          <div class="resource" id="health">
            <span class="resource-icon">‚ù§Ô∏è</span>
            <span class="resource-value">${gameState.health}</span>/<span class="resource-max">${gameState.maxHealth}</span>
          </div>
          <div class="resource" id="energy">
            <span class="resource-icon">‚ö°</span>
            <span class="resource-value">${gameState.energy}</span>/<span class="resource-max">${gameState.maxEnergy}</span>
          </div>
          <div class="resource" id="coins">
            <span class="resource-icon">üí∞</span>
            <span class="resource-value">${gameState.coins}</span>
          </div>
          <div class="resource" id="food">
            <span class="resource-icon">üçû</span>
            <span class="resource-value">${gameState.food}</span>
          </div>
          <div class="resource" id="knowledge">
            <span class="resource-icon">üìö</span>
            <span class="resource-value">${gameState.knowledge}</span>
          </div>
          <div class="resource" id="strength">
            <span class="resource-icon">‚öîÔ∏è</span>
            <span class="resource-value">${gameState.strength}</span>
          </div>
        </div>
      </div>
      
      <div id="inventory-container">
        <h3>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:</h3>
        <div class="inventory-items" id="inventory-items"></div>
      </div>
      
      <div id="story-log"></div>
      
      <div id="card-inventory">
        <h3>–ö–∞—Ä—Ç—ã –≤ —Ä—É–∫–µ:</h3>
        <div class="cards-container" id="hand-cards"></div>
        <h3>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã:</h3>
        <div class="cards-container" id="active-cards"></div>
      </div>
      
      <div id="battle-screen" class="mini-game" style="display:none">
        <h3>–ë–æ–π —Å <span id="enemy-name"></span></h3>
        <div class="battle-stats">
          <div>–≠–π–ª–∞: ‚ù§Ô∏è <span id="player-health">${gameState.health}</span>/${gameState.maxHealth} ‚öîÔ∏è ${gameState.strength}</div>
          <div><span id="enemy-name2"></span>: ‚ù§Ô∏è <span id="enemy-health"></span> ‚öîÔ∏è <span id="enemy-strength"></span></div>
        </div>
        <div class="enemy-image-container">
          <img id="enemy-image" src="" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–∞–≥–∞">
        </div>
        <div class="battle-choices">
          <button class="choice" onclick="battleChoice('attack')">–ê—Ç–∞–∫–æ–≤–∞—Ç—å</button>
          <button class="choice" onclick="battleChoice('defend')">–ó–∞—â–∏—â–∞—Ç—å—Å—è</button>
          <button class="choice" onclick="battleChoice('flee')">–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–±–µ–∂–∞—Ç—å</button>
        </div>
        <h4>–ö–∞—Ä—Ç—ã:</h4>
        <div class="battle-cards" id="battle-cards-container"></div>
        <div id="battle-log" class="hint"></div>
      </div>
      
      <div id="prologue" class="chapter active">
        <div class="card">
          <h3 class="card-title">–ü—Ä–æ–ª–æ–≥: –ù–∞—á–∞–ª–æ –ø—É—Ç–∏</h3>
          <img src="sanat.jpg" alt="–ë–µ—Ä–µ–≥ –î–Ω–µ–ø—Ä–∞" class="chapter-image">
          <p class="card-text">–¢—ã —Å—Ç–æ–∏—à—å –Ω–∞ –±–µ—Ä–µ–≥—É –î–Ω–µ–ø—Ä–∞. –ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –ø—Ä–æ—Å—Ç–∏—Ä–∞–µ—Ç—Å—è –ø—É—Å—Ç—ã–Ω–Ω–∞—è –∑–µ–º–ª—è, –æ—Å–≤–µ—â–∞–µ–º–∞—è –ª–∏—à—å –±–ª–µ–¥–Ω—ã–º —Å–≤–µ—Ç–æ–º –ª—É–Ω—ã. –í–¥–∞–ª–∏, –∑–∞ —Ö–æ–ª–º–∞–º–∏, –º–µ—Ä—Ü–∞–µ—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–π —Å–≤–µ—Ç - —Ç–æ—Ç —Å–∞–º—ã–π –î–∞–ª—ë–∫–∏–π –°–≤–µ—Ç, –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ–¥—è—Ç –ª–µ–≥–µ–Ω–¥—ã. –ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å?</p>
          <div class="choices">
            <button class="choice" onclick="makeChoice('explore')">üîç –ü–æ—Ä—ã—Å–∫–∞—Ç—å –ø–æ –∫—É—Å—Ç–∞–º</button>
            <button class="choice" onclick="makeChoice('light')">‚ú® –ò–¥—Ç–∏ –∫ —Å–≤–µ—Ç—É</button>
          </div>
        </div>
      </div>
      
      <div id="chapter1" class="chapter"></div>
      <div id="chapter2" class="chapter"></div>
      <div id="chapter3" class="chapter"></div>
      <div id="chapter4" class="chapter"></div>
      <div id="chapter5" class="chapter"></div>
      <div id="chapter6" class="chapter"></div>
    </div>
  `;

  resetAilaGame();
  addToStory("üåå –¢—ã –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è. –ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π - –±–µ—Ä–µ–≥ –î–Ω–µ–ø—Ä–∞, –∞ –≤–¥–∞–ª–∏ –º–µ—Ä—Ü–∞–µ—Ç —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –î–∞–ª—ë–∫–∏–π –°–≤–µ—Ç...", true);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç
  drawCard();
  drawCard();
  updateResources();
  renderCards();
  renderInventory();
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞
function makeChoice(choice) {
  switch(gameState.chapter) {
    case "prologue":
      handlePrologueChoice(choice);
      break;
    case "chapter1":
      handleChapter1Choice(choice);
      break;
    case "chapter2":
      handleChapter2Choice(choice);
      break;
    case "chapter3":
      handleChapter3Choice(choice);
      break;
    case "chapter4":
      handleChapter4Choice(choice);
      break;
    case "chapter5":
      handleChapter5Choice(choice);
      break;
    case "chapter6":
      handleChapter6Choice(choice);
      break;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –≥–ª–∞–≤—ã
function handlePrologueChoice(choice) {
  const prologue = document.getElementById('prologue');
  
  switch(choice) {
    case "explore":
      addToStory("–¢—ã —Ä–µ—à–∞–µ—à—å –æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –∫—É—Å—Ç—ã. –°—Ä–µ–¥–∏ –≤–µ—Ç–æ–∫ –∏ –ª–∏—Å—Ç—å–µ–≤ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –≤–µ—â–µ–π.", true);
      gameState.coins += 1;
      gameState.food += 1;
      gameState.inventory.push("–§–ª—è–≥–∞ —Å –≤–æ–¥–æ–π");
      updateResources();
      renderInventory();
      
      prologue.innerHTML = `
        <div class="card">
          <h3 class="card-title">–ü—Ä–æ–ª–æ–≥: –ù–∞—Ö–æ–¥–∫–∏ –≤ –∫—É—Å—Ç–∞—Ö</h3>
          <img src="sanat.jpg" alt="–ö—É—Å—Ç—ã" class="chapter-image">
          <p class="card-text">–°—Ä–µ–¥–∏ –∫—É—Å—Ç–æ–≤ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å —Ñ–ª—è–≥—É —Å –≤–æ–¥–æ–π, –Ω–µ–º–Ω–æ–≥–æ –µ–¥—ã –∏ –º–æ–Ω–µ—Ç. –¢–µ–ø–µ—Ä—å —Ç—ã –≥–æ—Ç–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –∫ –î–∞–ª—ë–∫–æ–º—É –°–≤–µ—Ç—É.</p>
          <div class="choices">
            <button class="choice" onclick="makeChoice('light')">‚ú® –ò–¥—Ç–∏ –∫ –î–∞–ª—ë–∫–æ–º—É –°–≤–µ—Ç—É</button>
          </div>
        </div>
      `;
      break;
      
    case "light":
      addToStory("–¢—ã —Ä–µ—à–∞–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –∫ –î–∞–ª—ë–∫–æ–º—É –°–≤–µ—Ç—É. –ü—É—Ç—å –ª–µ–∂–∏—Ç —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä–æ–µ –∫–ª–∞–¥–±–∏—â–µ...", true);
      changeChapter("chapter1");
      break;
  }
}

function handleChapter1Choice(choice) {
  const chapter1 = document.getElementById('chapter1');
  
  switch(choice) {
    case "enter_forest":
      if (gameState.inventory.includes("–ö–∞—Ä—Ç–∞ –∫–ª–∞–¥–±–∏—â–∞")) {
        addToStory("–ò—Å–ø–æ–ª—å–∑—É—è –∫–∞—Ä—Ç—É –∫–ª–∞–¥–±–∏—â–∞, —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å —á–µ—Ä–µ–∑ –∫–ª–∞–¥–±–∏—â–µ.", true);
        changeChapter("chapter2");
      } else {
        addToStory("–¢—ã –∑–∞—Ö–æ–¥–∏—à—å –Ω–∞ —Å—Ç–∞—Ä–æ–µ –∫–ª–∞–¥–±–∏—â–µ. –í–æ–∑–¥—É—Ö –Ω–∞–ø–æ–ª–Ω–µ–Ω —Å—Ç—Ä–∞–Ω–Ω—ã–º–∏ –∑–≤—É–∫–∞–º–∏ –∏ —à–µ–ø–æ—Ç–∞–º–∏.", true);
        startBattle("forest", "chapter1");
      }
      break;
      
    case "avoid_forest":
      if (gameState.inventory.includes("–ö–∞—Ä—Ç–∞ –∫–ª–∞–¥–±–∏—â–∞")) {
        addToStory("–ò—Å–ø–æ–ª—å–∑—É—è –∫–∞—Ä—Ç—É –∫–ª–∞–¥–±–∏—â–∞, —Ç—ã –æ–±—Ö–æ–¥–∏—à—å –æ–ø–∞—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –∏ –Ω–∞—Ö–æ–¥–∏—à—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å.", true);
        changeChapter("chapter2");
      } else {
        addToStory("–¢—ã –ø—ã—Ç–∞–µ—à—å—Å—è –æ–±–æ–π—Ç–∏ –∫–ª–∞–¥–±–∏—â–µ, –Ω–æ –±–µ–∑ –∫–∞—Ä—Ç—ã —Ç—ã —Ç–µ—Ä—è–µ—à—å—Å—è –∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–ø–∞–¥–∞–µ—à—å –≤ –æ–ø–∞—Å–Ω—É—é –∑–æ–Ω—É.", true);
        startBattle("forest", "chapter1");
      }
      break;
      
    case "rest":
      addToStory("–¢—ã —Ä–µ—à–∞–µ—à—å –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –Ω–∞ –∫–ª–∞–¥–±–∏—â–µ. –¢—ã –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—à—å —Å–∏–ª—ã.", true);
      gameState.health = Math.min(gameState.health + 2, gameState.maxHealth);
      gameState.energy = gameState.maxEnergy;
      updateResources();
      
      chapter1.innerHTML = `
        <div class="card">
          <h3 class="card-title">–ì–ª–∞–≤–∞ 1: –°—Ç–∞—Ä–æ–µ –∫–ª–∞–¥–±–∏—â–µ</h3>
          <img src="cemetery.jpg" alt="–°—Ç–∞—Ä–æ–µ –∫–ª–∞–¥–±–∏—â–µ" class="chapter-image">
          <p class="card-text">–û—Ç–¥–æ—Ö–Ω—É–≤, —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –ª—É—á—à–µ. –¢–µ–ø–µ—Ä—å —Ç—ã –≥–æ—Ç–æ–≤–∞ –ø–æ–π—Ç–∏ –Ω–∞ —Å—Ç–∞—Ä–æ–µ –∫–ª–∞–¥–±–∏—â–µ.</p>
          <div class="choices">
            <button class="choice" onclick="makeChoice('enter_forest')">‚ò¶Ô∏é –ü–æ–π—Ç–∏ –Ω–∞ —Å—Ç–∞—Ä–æ–µ –∫–ª–∞–¥–±–∏—â–µ</button>
            <button class="choice" onclick="makeChoice('avoid_forest')">üó∫Ô∏è –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ–±–æ–π—Ç–∏ –∫–ª–∞–¥–±–∏—â–µ</button>
          </div>
        </div>
      `;
      break;
      
    case "use_map":
      if (gameState.inventory.includes("–ö–∞—Ä—Ç–∞ –∫–ª–∞–¥–±–∏—â–∞")) {
        addToStory("–¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –∫–∞—Ä—Ç—É –∫–ª–∞–¥–±–∏—â–∞ –∏ –Ω–∞—Ö–æ–¥–∏—à—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å.", true);
        changeChapter("chapter2");
      }
      break;
  }
}

function handleChapter2Choice(choice) {
  const chapter2 = document.getElementById('chapter2');
  
  switch(choice) {
    case "explore_factory":
      if (gameState.inventory.includes("–ü—Ä–æ–ø—É—Å–∫ –Ω–∞ —Å–∫–ª–∞–¥")) {
        addToStory("–¢—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ—à—å –ø—Ä–æ–ø—É—Å–∫ –æ—Ö—Ä–∞–Ω–Ω–∏–∫—É –∏ –±–µ—Å–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–µ–Ω–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—à—å –Ω–∞ –∑–∞–≤–æ–¥.", true);
        addToStory("–ù–∞ —Å–∫–ª–∞–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –ø–æ–∑–∂–µ.", true);
        gameState.inventory.push("–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π –∫–ª—é—á");
        renderInventory();
        changeChapter("chapter3");
      } else {
        addToStory("–¢—ã –∏—Å—Å–ª–µ–¥—É–µ—à—å –ë–ú–ó. –í–Ω—É—Ç—Ä–∏ —Å–ª—ã—à–Ω—ã —Å—Ç—Ä–∞–Ω–Ω—ã–µ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –∑–≤—É–∫–∏.", true);
        startBattle("factory", "chapter2");
      }
      break;
      
    case "search_supplies":
      addToStory("–¢—ã –∏—â–µ—à—å –ø—Ä–∏–ø–∞—Å—ã –≤–æ–∫—Ä—É–≥ –∑–∞–≤–æ–¥–∞. –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å –Ω–µ–º–Ω–æ–≥–æ –µ–¥—ã –∏ –¥–µ—Ç–∞–ª—å —Å—Ç–∞–Ω–∫–∞.", true);
      gameState.food += 2;
      gameState.inventory.push("–î–µ—Ç–∞–ª—å —Å—Ç–∞–Ω–∫–∞");
      updateResources();
      renderInventory();
      
      chapter2.innerHTML = `
        <div class="card">
          <h3 class="card-title">–ì–ª–∞–≤–∞ 2: –ë–ú–ó</h3>
          <img src="bmz.jpg" alt="–ë–ú–ó" class="chapter-image">
          <p class="card-text">–ù–∞–π–¥—è –ø—Ä–∏–ø–∞—Å—ã, —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å –∏–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞–≤–æ–¥.</p>
          <div class="choices">
            <button class="choice" onclick="makeChoice('explore_factory')">üè≠ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ë–ú–ó</button>
            <button class="choice" onclick="makeChoice('continue_journey')">üö∂‚Äç‚ôÄÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å</button>
            <button class="choice" onclick="makeChoice('work_marketing')">üíº –†–∞–±–æ—Ç–∞—Ç—å –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–æ–º</button>
          </div>
        </div>
      `;
      break;
      
    case "work_marketing":
      if (!gameState.bmzWorked) {
        addToStory("–¢—ã —É—Å—Ç—Ä–∞–∏–≤–∞–µ—à—å—Å—è –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–æ–º –Ω–∞ –ë–ú–ó. –ó–∞ –¥–µ–Ω—å —Ä–∞–±–æ—Ç—ã —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å 5 –º–æ–Ω–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—à—å —ç–Ω–µ—Ä–≥–∏—é.", true);
        gameState.coins += 5;
        gameState.energy = gameState.maxEnergy;
        gameState.bmzWorked = true;
        updateResources();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã
        if (Math.random() > 0.5) {
          addToStory("–ó–∞ —Ö–æ—Ä–æ—à—É—é —Ä–∞–±–æ—Ç—É —Ç–µ–±–µ –≤—Ä—É—á–∞—é—Ç –ø—Ä–æ–ø—É—Å–∫ –Ω–∞ —Å–∫–ª–∞–¥!", true);
          gameState.inventory.push("–ü—Ä–æ–ø—É—Å–∫ –Ω–∞ —Å–∫–ª–∞–¥");
          renderInventory();
        }
      } else {
        addToStory("–¢—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª–∞ —Å–µ–≥–æ–¥–Ω—è. –õ—É—á—à–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏–ª–∏ –∑–∞–Ω—è—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ –¥–µ–ª–∞–º–∏.", true);
      }
      
      chapter2.innerHTML = `
        <div class="card">
          <h3 class="card-title">–ì–ª–∞–≤–∞ 2: –ë–ú–ó</h3>
          <img src="bmz.jpg" alt="–ë–ú–ó" class="chapter-image">
          <p class="card-text">–ü–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ –∑–∞–≤–æ–¥–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å –∏–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞–≤–æ–¥.</p>
          <div class="choices">
            <button class="choice" onclick="makeChoice('explore_factory')">üè≠ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ë–ú–ó</button>
            <button class="choice" onclick="makeChoice('continue_journey')">üö∂‚Äç‚ôÄÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å</button>
            <button class="choice" onclick="makeChoice('rest_factory')">üõå –û—Ç–¥–æ—Ö–Ω—É—Ç—å</button>
          </div>
        </div>
      `;
      break;
      
    case "rest_factory":
      addToStory("–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å —Ç–∏—Ö–æ–µ –º–µ—Å—Ç–æ –∏ –æ—Ç–¥—ã—Ö–∞–µ—à—å. –ó–¥–æ—Ä–æ–≤—å–µ –∏ —ç–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.", true);
      gameState.health = Math.min(gameState.health + 3, gameState.maxHealth);
      gameState.energy = gameState.maxEnergy;
      updateResources();
      
      chapter2.innerHTML = `
        <div class="card">
          <h3 class="card-title">–ì–ª–∞–≤–∞ 2: –ë–ú–ó</h3>
          <img src="bmz.jpg" alt="–ë–ú–ó" class="chapter-image">
          <p class="card-text">–û—Ç–¥–æ—Ö–Ω—É–≤, —Ç—ã –≥–æ—Ç–æ–≤–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å –∏–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞–≤–æ–¥.</p>
          <div class="choices">
            <button class="choice" onclick="makeChoice('explore_factory')">üè≠ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ë–ú–ó</button>
            <button class="choice" onclick="makeChoice('continue_journey')">üö∂‚Äç‚ôÄÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å</button>
          </div>
        </div>
      `;
      break;
      
    case "continue_journey":
      addToStory("–¢—ã —Ä–µ—à–∞–µ—à—å –Ω–µ —Ä–∏—Å–∫–æ–≤–∞—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—à—å –ø—É—Ç—å, –æ—Å—Ç–∞–≤–ª—è—è –∑–∞–≤–æ–¥ –ø–æ–∑–∞–¥–∏.", true);
      changeChapter("chapter3");
      break;
  }
}

function handleChapter3Choice(choice) {
  const chapter3 = document.getElementById('chapter3');
  
  switch(choice) {
    case "enter_mine":
      if (gameState.inventory.includes("–ö–∞—Ä—Ç–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞")) {
        addToStory("–ò—Å–ø–æ–ª—å–∑—É—è –∫–∞—Ä—Ç—É –ª–∞–±–∏—Ä–∏–Ω—Ç–∞, —Ç—ã –ª–µ–≥–∫–æ –Ω–∞—Ö–æ–¥–∏—à—å –≤—ã—Ö–æ–¥ –∏–∑ –ï–≤—Ä–æ–æ–ø—Ç–∞.", true);
        changeChapter("chapter4");
      } else {
        addToStory("–¢—ã –ø—Ä–∏—Ö–æ–¥–∏—à—å –∫ –ï–≤—Ä–æ–æ–ø—Ç—É. –¢–µ–º–Ω–æ—Ç–∞ —Å–≥—É—â–∞–µ—Ç—Å—è, –∏ —Å–ª—ã—à–Ω—ã —Å—Ç—Ä–∞–Ω–Ω—ã–µ –∑–≤—É–∫–∏.", true);
        startBattle("mine", "chapter3");
      }
      break;
      
    case "solve_riddle":
      showRiddleModal();
      break;
      
    case "buy_map":
      if (gameState.coins >= 3) {
        addToStory("–¢—ã –ø–æ–∫—É–ø–∞–µ—à—å –∫–∞—Ä—Ç—É –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ —É —Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤—Ü–∞.", true);
        gameState.coins -= 3;
        gameState.inventory.push("–ö–∞—Ä—Ç–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞");
        updateResources();
        renderInventory();
        chapter3.innerHTML = `
          <div class="card">
            <h3 class="card-title">–ì–ª–∞–≤–∞ 3: –ï–≤—Ä–æ–æ–ø—Ç</h3>
            <img src="evroopt.jpg" alt="–ï–≤—Ä–æ–æ–ø—Ç" class="chapter-image">
            <p class="card-text">–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞—Ä—Ç–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞. –ß—Ç–æ —Ç—ã –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å?</p>
            <div class="choices">
              <button class="choice" onclick="makeChoice('enter_mine')">‚õèÔ∏è –í–æ–π—Ç–∏ –≤ –ï–≤—Ä–æ–æ–ø—Ç</button>
            </div>
          </div>
        `;
      } else {
        addToStory("–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–∞—Ä—Ç—ã!", true);
      }
      break;
  }
}

function showRiddleModal() {
  const modal = document.createElement('div');
  modal.style.position = 'fixed';
  modal.style.top = '0';
  modal.style.left = '0';
  modal.style.width = '100%';
  modal.style.height = '100%';
  modal.style.backgroundColor = 'rgba(0,0,0,0.7)';
  modal.style.display = 'flex';
  modal.style.justifyContent = 'center';
  modal.style.alignItems = 'center';
  modal.style.zIndex = '1000';
  
  const modalContent = document.createElement('div');
  modalContent.style.backgroundColor = '#333';
  modalContent.style.padding = '20px';
  modalContent.style.borderRadius = '10px';
  modalContent.style.border = '2px solid #ffcc33';
  modalContent.style.boxShadow = '0 0 20px #ffcc33';
  modalContent.style.textAlign = 'center';
  modalContent.style.width = '80%';
  modalContent.style.maxWidth = '500px';
  
  const riddleText = document.createElement('p');
  riddleText.textContent = "–ß—Ç–æ –º–æ–∂–Ω–æ —Å–ª–æ–º–∞—Ç—å, –¥–∞–∂–µ –Ω–µ –∫–∞—Å–∞—è—Å—å —ç—Ç–æ–≥–æ?";
  riddleText.style.fontSize = '1.2rem';
  riddleText.style.marginBottom = '20px';
  riddleText.style.color = '#ffcc33';
  
  const input = document.createElement('input');
  input.type = 'text';
  input.style.padding = '12px';
  input.style.fontSize = '1rem';
  input.style.marginBottom = '20px';
  input.style.width = '90%';
  input.style.borderRadius = '6px';
  input.style.border = '2px solid #ffcc33';
  input.style.background = '#222';
  input.style.color = '#fff';
  input.style.textAlign = 'center';
  
  const submitBtn = document.createElement('button');
  submitBtn.textContent = '–û—Ç–≤–µ—Ç–∏—Ç—å';
  submitBtn.className = 'btn';
  submitBtn.style.marginTop = '10px';
  submitBtn.onclick = () => {
    const answer = input.value.toLowerCase().trim();
    if (answer === "–º–æ–ª—á–∞–Ω–∏–µ" || answer === "—Ç–∏—à–∏–Ω–∞") {
      modal.remove();
      addToStory("–¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –∑–∞–≥–∞–¥–∫—É! –î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –∏ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ –¥–∞–ª—å—à–µ –±–µ–∑ –±–æ—è.", true);
      gameState.riddlesSolved++;
      changeChapter("chapter4");
    } else {
      modal.remove();
      addToStory("–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ò–∑ —Ç–µ–º–Ω–æ—Ç—ã –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤—Ä–∞–≥!", true);
      startBattle("mine", "chapter3");
    }
  };
  
  modalContent.appendChild(riddleText);
  modalContent.appendChild(input);
  modalContent.appendChild(submitBtn);
  modal.appendChild(modalContent);
  document.body.appendChild(modal);
  
  input.focus();
}

function handleChapter4Choice(choice) {
  const chapter4 = document.getElementById('chapter4');
  
  switch(choice) {
    case "enter_tower":
      if (gameState.inventory.includes("–•—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π –∫–ª—é—á") || gameState.inventory.includes("–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π –∫–ª—é—á")) {
        addToStory("–¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –∫–ª—é—á, –∏ –¥–≤–µ—Ä—å –±–∞—à–Ω–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å –≥–ª—É—Ö–∏–º —Å–∫—Ä–µ–∂–µ—Ç–æ–º.", true);
        changeChapter("chapter5");
      } else {
        addToStory("–¢—ã –ø–æ–¥—Ö–æ–¥–∏—à—å –∫ –∑–∞–≥–∞–¥–æ—á–Ω–æ–π –±–∞—à–Ω–µ. –î–≤–µ—Ä—å –∑–∞–ø–µ—Ä—Ç–∞, –∏ —É –Ω–µ—ë –Ω–µ—Ç –∫–ª—é—á–∞.", true);
        
        chapter4.innerHTML = `
          <div class="card">
            <h3 class="card-title">–ì–ª–∞–≤–∞ 4: –ë–∞—à–Ω—è –°–≤–µ—Ç–∞</h3>
            <img src="https://via.placeholder.com/300x150?text=–ë–∞—à–Ω—è+–°–≤–µ—Ça" alt="–ë–∞—à–Ω—è –°–≤–µ—Ç–∞" class="chapter-image">
            <p class="card-text">–ë–∞—à–Ω—è –∑–∞–ø–µ—Ä—Ç–∞. –¢–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∫–ª—é—á –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –≤–æ–π—Ç–∏.</p>
            <div class="choices">
              <button class="choice" onclick="makeChoice('search_around')">üîç –ò—Å–∫–∞—Ç—å –≤–æ–∫—Ä—É–≥ –±–∞—à–Ω–∏</button>
              <button class="choice" onclick="makeChoice('study_machines')">üîß –ò–∑—É—á–∏—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º—ã</button>
              <button class="choice" onclick="makeChoice('return')">‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥</button>
            </div>
          </div>
        `;
      }
      break;
      
    case "study_machines":
      if (gameState.inventory.includes("–î–µ—Ç–∞–ª—å —Å—Ç–∞–Ω–∫–∞")) {
        addToStory("–¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –¥–µ—Ç–∞–ª—å —Å—Ç–∞–Ω–∫–∞, —á—Ç–æ–±—ã –ø–æ—á–∏–Ω–∏—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—à–Ω–∏. –î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è!", true);
        changeChapter("chapter5");
      } else {
        addToStory("–¢—ã –∏–∑—É—á–∞–µ—à—å –º–µ—Ö–∞–Ω–∏–∑–º—ã –≤–æ–∫—Ä—É–≥ –±–∞—à–Ω–∏. –ö–∞–∂–µ—Ç—Å—è, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–∞–∫–æ–π-—Ç–æ –¥–µ—Ç–∞–ª–∏...", true);
      }
      break;
      
    case "search_around":
      const foundKey = Math.random() > 0.5;
      if (foundKey) {
        addToStory("–¢—ã –∏—â–µ—à—å –≤–æ–∫—Ä—É–≥ –±–∞—à–Ω–∏ –∏ –Ω–∞—Ö–æ–¥–∏—à—å —Ö—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π –∫–ª—é—á, —Å–ø—Ä—è—Ç–∞–Ω–Ω—ã–π –ø–æ–¥ –∫–∞–º–Ω–µ–º!", true);
        gameState.inventory.push("–•—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π –∫–ª—é—á");
        renderInventory();
        
        chapter4.innerHTML = `
          <div class="card">
            <h3 class="card-title">–ì–ª–∞–≤–∞ 4: –ë–∞—à–Ω—è –°–≤–µ—Ç–∞</h3>
            <img src="https://via.placeholder.com/300x150?text=–ë–∞—à–Ω—è+–°–≤–µ—Ç–∞" alt="–ë–∞—à–Ω—è –°–≤–µ—Ç–∞" class="chapter-image">
            <p class="card-text">–¢—ã –Ω–∞—à–ª–∞ –∫–ª—é—á! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –≤ –±–∞—à–Ω—é.</p>
            <div class="choices">
              <button class="choice" onclick="makeChoice('enter_tower')">üö™ –í–æ–π—Ç–∏ –≤ –±–∞—à–Ω—é</button>
            </div>
          </div>
        `;
      } else {
        addToStory("–¢—ã –æ–±—ã—Å–∫–∏–≤–∞–µ—à—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –≤–æ–∫—Ä—É–≥ –±–∞—à–Ω–∏, –Ω–æ –Ω–∏—á–µ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –Ω–µ –Ω–∞—Ö–æ–¥–∏—à—å.", true);
      }
      break;
      
    case "return":
      addToStory("–¢—ã —Ä–µ—à–∞–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –ø–æ–∏—Å–∫–∞—Ç—å –∫–ª—é—á –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö.", true);
      changeChapter("chapter3");
      break;
  }
}

function handleChapter5Choice(choice) {
  const chapter5 = document.getElementById('chapter5');
  
  switch(choice) {
    case "climb_tower":
      // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ–ª—è–≥–∏ —Å –≤–æ–¥–æ–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è
      if (gameState.inventory.includes("–§–ª—è–≥–∞ —Å –≤–æ–¥–æ–π")) {
        addToStory("–¢—ã –ø—å–µ—à—å –≤–æ–¥—É –∏–∑ —Ñ–ª—è–≥–∏ –∏ —á—É–≤—Å—Ç–≤—É–µ—à—å –ø—Ä–∏–ª–∏–≤ —Å–∏–ª –ø–µ—Ä–µ–¥ –ø–æ–¥—ä–µ–º–æ–º.", true);
        gameState.health = Math.min(gameState.health + 3, gameState.maxHealth);
        gameState.inventory = gameState.inventory.filter(item => item !== "–§–ª—è–≥–∞ —Å –≤–æ–¥–æ–π");
        updateResources();
        renderInventory();
      }
      addToStory("–¢—ã –Ω–∞—á–∏–Ω–∞–µ—à—å –ø–æ–¥–Ω–∏–º–∞—Ç—å—Å—è –ø–æ –≤–∏–Ω—Ç–æ–≤–æ–π –ª–µ—Å—Ç–Ω–∏—Ü–µ –±–∞—à–Ω–∏. –° –∫–∞–∂–¥—ã–º —ç—Ç–∞–∂–æ–º –≤–æ–∑–¥—É—Ö —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤—Å—ë –±–æ–ª–µ–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º —ç–Ω–µ—Ä–≥–∏–µ–π.", true);
      startBattle("tower", "chapter5");
      break;
      
    case "rest_tower":
      addToStory("–¢—ã —Ä–µ—à–∞–µ—à—å –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–æ–¥—ä—ë–º–æ–º. –û–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏–ª—ã.", true);
      gameState.health = Math.min(gameState.health + 3, gameState.maxHealth);
      gameState.energy = gameState.maxEnergy;
      updateResources();
      
      chapter5.innerHTML = `
        <div class="card">
          <h3 class="card-title">–ì–ª–∞–≤–∞ 5: –í–Ω—É—Ç—Ä–∏ –±–∞—à–Ω–∏</h3>
          <img src="https://via.placeholder.com/300x150?text=–í–Ω—É—Ç—Ä–∏+–±–∞—à–Ω–∏" alt="–í–Ω—É—Ç—Ä–∏ –±–∞—à–Ω–∏" class="chapter-image">
          <p class="card-text">–û—Ç–¥–æ—Ö–Ω—É–≤, —Ç—ã –≥–æ—Ç–æ–≤–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥—ä—ë–º –Ω–∞ –≤–µ—Ä—à–∏–Ω—É –±–∞—à–Ω–∏.</p>
          <div class="choices">
            <button class="choice" onclick="makeChoice('climb_tower')">‚¨ÜÔ∏è –ü–æ–¥–Ω—è—Ç—å—Å—è –Ω–∞ –≤–µ—Ä—à–∏–Ω—É</button>
          </div>
        </div>
      `;
      break;
  }
}

function handleChapter6Choice(choice) {
  const chapter6 = document.getElementById('chapter6');
  
  switch(choice) {
    case "activate_light":
      if (gameState.inventory.includes("–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á")) {
        addToStory("–¢—ã –≤—Å—Ç–∞–≤–ª—è–µ—à—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á –≤ –º–µ—Ö–∞–Ω–∏–∑–º –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—à—å –î–∞–ª—ë–∫–∏–π –°–≤–µ—Ç!", true);
      } else {
        addToStory("–¢—ã –∞–∫—Ç–∏–≤–∏—Ä—É–µ—à—å –º–µ—Ö–∞–Ω–∏–∑–º –î–∞–ª—ë–∫–æ–≥–æ –°–≤–µ—Ç–∞. –Ø—Ä–∫–∏–π —Å–≤–µ—Ç –æ–∑–∞—Ä—è–µ—Ç –≤—Å—ë –≤–æ–∫—Ä—É–≥!", true);
      }
      
      chapter6.innerHTML = `
        <div class="card">
          <h3 class="card-title">–ì–ª–∞–≤–∞ 6: –§–∏–Ω–∞–ª</h3>
          <img src="https://via.placeholder.com/300x150?text=–î–∞–ª—ë–∫–∏–π+–°–≤–µ—Ç" alt="–î–∞–ª—ë–∫–∏–π –°–≤–µ—Ç" class="chapter-image">
          <p class="card-text">–î–∞–ª—ë–∫–∏–π –°–≤–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ú–∏—Ä –≤–æ–∫—Ä—É–≥ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —Å–≤–µ—Ç–ª—ã–º –∏ —Ä–∞–¥–æ—Å—Ç–Ω—ã–º. –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∞ —Å–≤–æ—é –º–∏—Å—Å–∏—é!</p>
          <div class="choices">
            <button class="choice" onclick="initAilaGame()">üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</button>
            <button class="choice" onclick="completeAilaGame()">üéÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É</button>
          </div>
        </div>
      `;
      break;
  }
}

function completeAilaGame() {
  gamesCompleted.cards = true;
  showBoxAnimation(3);
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ—Ç–µ–∫—Ç–∏–≤—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    if (navButtons && navButtons.detective) {
      navButtons.detective.click();
    }
  }, 3000);
}

function changeChapter(newChapter) {
  // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≥–ª–∞–≤—ã
  document.querySelectorAll('.chapter').forEach(chapter => {
    chapter.classList.remove('active');
  });
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≥–ª–∞–≤—É
  const chapterElement = document.getElementById(newChapter);
  if (chapterElement) {
    chapterElement.classList.add('active');
  }
  
  gameState.chapter = newChapter;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π –≥–ª–∞–≤—ã
  switch(newChapter) {
    case "chapter1":
      document.getElementById('chapter1').innerHTML = `
        <div class="card">
          <h3 class="card-title">–ì–ª–∞–≤–∞ 1: –°—Ç–∞—Ä–æ–µ –∫–ª–∞–¥–±–∏—â–µ</h3>
          <img src="cemetery.jpg" alt="–°—Ç–∞—Ä–æ–µ –∫–ª–∞–¥–±–∏—â–µ" class="chapter-image">
          <p class="card-text">–¢—ã –ø–æ–¥—Ö–æ–¥–∏—à—å –∫ –æ–¥–Ω–æ–π –∏–∑ –º–æ–≥–∏–ª. –í–µ—Ç–µ—Ä —Ç–∏—Ö–æ–Ω—å–∫–æ –∑–∞–≤—ã–≤–∞–µ—Ç, –∞ –≤ –≥–ª—É–±–∏–Ω–µ –∫–ª–∞–¥–±–∏—â–∞ —Å–ª—ã—à–Ω—ã —Å—Ç—Ä–∞–Ω–Ω—ã–µ –∑–≤—É–∫–∏. –ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å?</p>
          <div class="choices">
            <button class="choice" onclick="makeChoice('enter_forest')">‚ò¶Ô∏é –ü–æ–π—Ç–∏ –Ω–∞ –∫–ª–∞–¥–±–∏—â–µ</button>
            <button class="choice" onclick="makeChoice('avoid_forest')">üó∫Ô∏è –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ–±–æ–π—Ç–∏ –∫–ª–∞–¥–±–∏—â–µ</button>
            <button class="choice" onclick="makeChoice('rest')">üõå –û—Ç–¥–æ—Ö–Ω—É—Ç—å –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º</button>
            ${gameState.inventory.includes("–ö–∞—Ä—Ç–∞ –∫–ª–∞–¥–±–∏—â–∞") ? 
              '<button class="choice" onclick="makeChoice(\'use_map\')">üó∫Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É</button>' : ''}
          </div>
        </div>
      `;
      break;
      
    case "chapter2":
      document.getElementById('chapter2').innerHTML = `
        <div class="card">
          <h3 class="card-title">–ì–ª–∞–≤–∞ 2: –ë–ú–ó</h3>
          <img src="bmz.jpg" alt="–ë–ú–ó" class="chapter-image">
          <p class="card-text">–ü—Ä–æ–π–¥—è —Å—Ç–∞—Ä–æ–µ –∫–ª–∞–¥–±–∏—â–µ, —Ç—ã –Ω–∞–∫–æ–Ω–µ—Ü –ø—Ä–∏—Ö–æ–¥–∏—à—å –∫ –ë–ú–ó.</p>
          <div class="choices">
            <button class="choice" onclick="makeChoice('explore_factory')">üè≠ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ë–ú–ó</button>
            <button class="choice" onclick="makeChoice('search_supplies')">üîç –ò—Å–∫–∞—Ç—å –ø—Ä–∏–ø–∞—Å—ã –≤–æ–∫—Ä—É–≥</button>
            <button class="choice" onclick="makeChoice('work_marketing')">üíº –†–∞–±–æ—Ç–∞—Ç—å –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–æ–º</button>
            <button class="choice" onclick="makeChoice('continue_journey')">üö∂‚Äç‚ôÄÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å</button>
          </div>
        </div>
      `;
      break;
      
    case "chapter3":
      document.getElementById('chapter3').innerHTML = `
        <div class="card">
          <h3 class="card-title">–ì–ª–∞–≤–∞ 3: –ï–≤—Ä–æ–æ–ø—Ç</h3>
          <img src="evroopt.jpg" alt="–ï–≤—Ä–æ–æ–ø—Ç" class="chapter-image">
          <p class="card-text">–î–æ—Ä–æ–≥–∞ –ø—Ä–∏–≤–æ–¥–∏—Ç —Ç–µ–±—è –∫ –≤—Ö–æ–¥—É –≤ –ï–≤—Ä–æ–æ–ø—Ç. –ù–∞–¥–ø–∏—Å—å –Ω–∞ —Å—Ç–µ–Ω–µ –≥–ª–∞—Å–∏—Ç: '–ï–≤—Ä–æ–æ–ø—Ç | Hyper'. –†—è–¥–æ–º —Å—Ç–æ–∏—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤–µ—Ü.</p>
          <div class="choices">
            <button class="choice" onclick="makeChoice('enter_mine')">‚õèÔ∏è –í–æ–π—Ç–∏ –≤ –ï–≤—Ä–æ–æ–ø—Ç</button>
            <button class="choice" onclick="makeChoice('solve_riddle')">‚ùì –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–≥–∞–¥–∫—É</button>
            <button class="choice" onclick="makeChoice('buy_map')">üó∫Ô∏è –ö—É–ø–∏—Ç—å –∫–∞—Ä—Ç—É –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ (3 –º–æ–Ω–µ—Ç—ã)</button>
          </div>
        </div>
      `;
      break;
      
    case "chapter4":
      document.getElementById('chapter4').innerHTML = `
        <div class="card">
          <h3 class="card-title">–ì–ª–∞–≤–∞ 4: –ë–∞—à–Ω—è –°–≤–µ—Ç–∞</h3>
          <img src="https://via.placeholder.com/300x150?text=–ë–∞—à–Ω—è+–°–≤–µ—Ç–∞" alt="–ë–∞—à–Ω—è –°–≤–µ—Ç–∞" class="chapter-image">
          <p class="card-text">–ü–æ—Å–ª–µ –¥–æ–ª–≥–æ–≥–æ –ø—É—Ç–∏ —Ç—ã –Ω–∞–∫–æ–Ω–µ—Ü –≤–∏–¥–∏—à—å –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π –ë–∞—à–Ω—é –°–≤–µ—Ç–∞ - –∏—Å—Ç–æ—á–Ω–∏–∫ –î–∞–ª—ë–∫–æ–≥–æ –°–≤–µ—Ç–∞. –ë–∞—à–Ω—è –æ–∫—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–Ω—ã–º–∏ –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏.</p>
          <div class="choices">
            <button class="choice" onclick="makeChoice('enter_tower')">üö™ –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –≤–æ–π—Ç–∏</button>
            <button class="choice" onclick="makeChoice('study_machines')">üîß –ò–∑—É—á–∏—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º—ã</button>
            ${gameState.inventory.includes("–î–µ—Ç–∞–ª—å —Å—Ç–∞–Ω–∫–∞") ? 
              '<button class="choice" onclick="makeChoice(\'study_machines\')">üî© –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å —Å—Ç–∞–Ω–∫–∞</button>' : ''}
          </div>
        </div>
      `;
      break;
      
    case "chapter5":
      document.getElementById('chapter5').innerHTML = `
        <div class="card">
          <h3 class="card-title">–ì–ª–∞–≤–∞ 5: –í–Ω—É—Ç—Ä–∏ –±–∞—à–Ω–∏</h3>
          <img src="https://via.placeholder.com/300x150?text=–í–Ω—É—Ç—Ä–∏+–±–∞—à–Ω–∏" alt="–í–Ω—É—Ç—Ä–∏ –±–∞—à–Ω–∏" class="chapter-image">
          <p class="card-text">–¢—ã –≤—Ö–æ–¥–∏—à—å –≤ –±–∞—à–Ω—é. –í–Ω—É—Ç—Ä–∏ –æ–Ω–∞ –≤–∏–¥–∏—Ç –≤–∏–Ω—Ç–æ–≤—É—é –ª–µ—Å—Ç–Ω–∏—Ü—É, –≤–µ–¥—É—â—É—é –Ω–∞–≤–µ—Ä—Ö. –í–æ–∑–¥—É—Ö –Ω–∞–ø–æ–ª–Ω–µ–Ω —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ–º.</p>
          <div class="choices">
            <button class="choice" onclick="makeChoice('climb_tower')">‚¨ÜÔ∏è –ü–æ–¥–Ω—è—Ç—å—Å—è –Ω–∞–≤–µ—Ä—Ö</button>
            <button class="choice" onclick="makeChoice('rest_tower')">üõå –û—Ç–¥–æ—Ö–Ω—É—Ç—å –ø–µ—Ä–µ–¥ –ø–æ–¥—ä—ë–º–æ–º</button>
          </div>
        </div>
      `;
      break;
      
    case "chapter6":
      document.getElementById('chapter6').innerHTML = `
        <div class="card">
          <h3 class="card-title">–ì–ª–∞–≤–∞ 6: –°–µ—Ä–¥—Ü–µ –°–≤–µ—Ç–∞</h3>
          <img src="https://via.placeholder.com/300x150?text=–°–µ—Ä–¥—Ü–µ+–°–≤–µ—Ç–∞" alt="–°–µ—Ä–¥—Ü–µ –°–≤–µ—Ç–∞" class="chapter-image">
          <p class="card-text">–≠–π–ª–∞ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç –≤–µ—Ä—à–∏–Ω—ã –±–∞—à–Ω–∏. –ü–µ—Ä–µ–¥ –Ω–µ–π –æ–≥—Ä–æ–º–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º, –∏–∑–ª—É—á–∞—é—â–∏–π –î–∞–ª—ë–∫–∏–π –°–≤–µ—Ç. –ß—Ç–æ –æ–Ω–∞ —Å–¥–µ–ª–∞–µ—Ç?</p>
          <div class="choices">
            <button class="choice" onclick="makeChoice('activate_light')">‚ú® –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–µ—Ç</button>
          </div>
        </div>
      `;
      break;
  }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –±–æ—è
function startBattle(enemyType, chapter) {
  const enemyList = enemies[enemyType];
  if (!enemyList || enemyList.length === 0) return;
  
  const enemy = {...enemyList[Math.floor(Math.random() * enemyList.length)]};
  gameState.currentEnemy = enemy;
  
  document.getElementById('enemy-name').textContent = enemy.name;
  document.getElementById('enemy-name2').textContent = enemy.name;
  document.getElementById('enemy-health').textContent = enemy.health;
  document.getElementById('enemy-strength').textContent = enemy.strength;
  document.getElementById('player-health').textContent = gameState.health;
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–∞–≥–∞
  const enemyImage = document.getElementById('enemy-image');
  if (enemyImage) {
    enemyImage.src = enemy.image;
    enemyImage.alt = enemy.name;
  }
  
  document.querySelector(`#${chapter}`).classList.remove('active');
  document.getElementById('battle-screen').style.display = 'block';
  addToStory(`‚öîÔ∏è –¢—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∞ ${enemy.name}! –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –±–æ–π!`, true);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –±–æ—è
  renderBattleCards();
}

function renderBattleCards() {
  const container = document.getElementById('battle-cards-container');
  if (!container) return;
  
  container.innerHTML = '';
  
  if (gameState.cards.hand.length === 0) {
    container.innerHTML = '<p>–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç –≤ —Ä—É–∫–µ</p>';
    return;
  }
  
  gameState.cards.hand.forEach((card, index) => {
    const cardEl = document.createElement('div');
    cardEl.className = 'battle-card';
    cardEl.textContent = card.name;
    cardEl.title = card.effect;
    cardEl.onclick = () => useCard(index, true);
    container.appendChild(cardEl);
  });
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –≤ –±–æ—é
function battleChoice(choice) {
  const enemy = gameState.currentEnemy;
  let battleLog = document.getElementById('battle-log');
  if (!battleLog) return;
  
  battleLog.textContent = '';
  
  if (choice === 'attack') {
    // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
    let playerRoll = Math.floor(Math.random() * 6) + 1 + gameState.strength;
    
    // –ë–æ–Ω—É—Å –æ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç
    if (gameState.cards.active.some(card => card.id === "sword")) {
      playerRoll += 1;
    }
    
    enemy.health -= playerRoll;
    addToStory(`–¢—ã –∞—Ç–∞–∫—É–µ—à—å –∏ –Ω–∞–Ω–æ—Å–∏—à—å ${playerRoll} —É—Ä–æ–Ω–∞!`, false);
    
    if (enemy.health <= 0) {
      battleLog.textContent = `–¢—ã –ø–æ–±–µ–¥–∏–ª–∞ ${enemy.name}!`;
      endBattle(true);
      return;
    }
    
    // –í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç
    let enemyRoll = Math.floor(Math.random() * 6) + 1 + enemy.strength;
    
    // –ë–æ–Ω—É—Å –∑–∞—â–∏—Ç—ã
    if (gameState.cards.active.some(card => card.id === "shield")) {
      enemyRoll = Math.max(0, enemyRoll - 1);
    }
    
    gameState.health -= enemyRoll;
    addToStory(`${enemy.name} –∞—Ç–∞–∫—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç ${enemyRoll} —É—Ä–æ–Ω–∞!`, false);
    
  } else if (choice === 'defend') {
    // –ó–∞—â–∏—Ç–∞ —É–º–µ–Ω—å—à–∞–µ—Ç —É—Ä–æ–Ω
    let enemyRoll = Math.floor(Math.random() * 6) + 1 + enemy.strength - 2;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –∫–∞—Ä—Ç
    if (gameState.cards.active.some(card => card.id === "shield")) {
      enemyRoll = Math.max(0, enemyRoll - 1);
    }
    
    if (enemyRoll > 0) {
      gameState.health -= enemyRoll;
      addToStory(`–¢—ã –∑–∞—â–∏—â–∞–µ—Ç–µ—à—å—Å—è –∏ –ø–æ–ª—É—á–∞–µ—à—å ${enemyRoll} —É—Ä–æ–Ω–∞ (–≤–º–µ—Å—Ç–æ ${enemyRoll + 2})`, false);
    } else {
      addToStory("–¢—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ –∞—Ç–∞–∫—É!", false);
    }
  } else if (choice === 'flee') {
    // –ü–æ–ø—ã—Ç–∫–∞ —É–±–µ–∂–∞—Ç—å
    const fleeChance = Math.random();
    if (fleeChance > 0.5) {
      addToStory("–¢–µ–±–µ —É–¥–∞—ë—Ç—Å—è —É–±–µ–∂–∞—Ç—å –æ—Ç –≤—Ä–∞–≥–∞!", true);
      endBattle(false);
      return;
    } else {
      addToStory("–¢–µ–±–µ –Ω–µ —É–¥–∞—ë—Ç—Å—è —É–±–µ–∂–∞—Ç—å!", false);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∏–≥—Ä–æ–∫–∞
  if (gameState.health <= 0) {
    battleLog.textContent = "–¢—ã –ø–æ–≥–∏–±–ª–∞! –ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ.";
    setTimeout(() => {
      resetAilaGame();
    }, 3000);
    return;
  }
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  document.getElementById('enemy-health').textContent = Math.max(0, enemy.health);
  document.getElementById('player-health').textContent = gameState.health;
  updateResources();
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã
function resetAilaGame() {
  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  gameState.health = 8;
  gameState.energy = 5;
  gameState.coins = 3;
  gameState.food = 2;
  gameState.knowledge = 0;
  gameState.strength = 2;
  gameState.inventory = [];
  gameState.companions = [];
  gameState.cards = {
    hand: [],
    active: [],
    deck: [
      {id: "hide", name: "–£–∫—Ä—ã—Ç–∏–µ", type: "action", effect: "–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è –æ—Ç –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"},
      {id: "leo", name: "–õ—ë—à–∞", type: "companion", effect: "–î–∞–µ—Ç +1 –∫ –±—Ä–æ—Å–∫–∞–º –∫—É–±–∏–∫–∞"},
      {id: "food", name: "–ü—Ä–∏–ø–∞—Å—ã", type: "resource", effect: "+2 –µ–¥—ã –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏"},
      {id: "map", name: "–ö–∞—Ä—Ç–∞ –∫–ª–∞–¥–±–∏—â–∞", type: "special", effect: "–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–≥–∞–¥–æ–∫"},
      {id: "key", name: "–•—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π –∫–ª—é—á", type: "special", effect: "–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–∞—à–Ω—é"},
      {id: "sword", name: "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á", type: "weapon", effect: "+1 –∫ —Å–∏–ª–µ –≤ –±–æ—é"},
      {id: "shield", name: "–õ–∏—Å—Ç-—â–∏—Ç", type: "armor", effect: "+1 –∫ –∑–∞—â–∏—Ç–µ"}
    ],
    discard: []
  };
  gameState.chapter = "prologue";
  gameState.bmzWorked = false;
  gameState.currentEnemy = null;
  gameState.mineProgress = 0;
  gameState.spiderHealth = 5;
  gameState.riddlesSolved = 0;
  gameState.towerChallengePassed = false;
}

function endBattle(victory) {
  if (victory) {
    const enemy = gameState.currentEnemy;
    addToStory(`üéâ –¢—ã –ø–æ–±–µ–¥–∏–ª–∞ ${enemy.name} –∏ –ø–æ–ª—É—á–∞–µ—à—å –Ω–∞–≥—Ä–∞–¥—É!`, true);
    
    // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–±–µ–¥—É
    switch(enemy.reward) {
      case "food": 
        gameState.food += 2; 
        break;
      case "coins": 
        gameState.coins += 3; 
        break;
      case "knowledge": 
        gameState.knowledge += 1; 
        break;
      case "key_part": 
        gameState.inventory.push("–ß–∞—Å—Ç—å –∫–ª—é—á–∞");
        addToStory("–¢—ã –ø–æ–ª—É—á–∏–ª–∞ —á–∞—Å—Ç—å –∫–ª—é—á–∞ –æ—Ç –±–∞—à–Ω–∏!", true);
        renderInventory();
        break;
      case "energy":
        gameState.energy = Math.min(gameState.energy + 3, gameState.maxEnergy);
        break;
      case "strength":
        gameState.strength += 1;
        addToStory("–¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è —Å–∏–ª—å–Ω–µ–µ!", true);
        break;
      case "final_key":
        gameState.inventory.push("–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á");
        addToStory("–¢—ã –ø–æ–ª—É—á–∏–ª–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á –∫ –º–µ—Ö–∞–Ω–∏–∑–º—É —Å–≤–µ—Ç–∞!", true);
        renderInventory();
        break;
      case "victory":
        addToStory("–¢—ã –ø–æ–±–µ–¥–∏–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ä–∞–≥–∞! –ü—É—Ç—å –∫ –î–∞–ª—ë–∫–æ–º—É –°–≤–µ—Ç—É —Å–≤–æ–±–æ–¥–µ–Ω!", true);
        break;
    }
    updateResources();
  } else {
    addToStory("–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ –±–æ–π –∏ —Ç–µ—Ä—è–µ—à—å —á–∞—Å—Ç—å —Ä–µ—Å—É—Ä—Å–æ–≤...", true);
    gameState.food = Math.max(0, gameState.food - 1);
    gameState.coins = Math.max(0, gameState.coins - 1);
    updateResources();
  }
  
  document.getElementById('battle-screen').style.display = 'none';
  
  // –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –≥–ª–∞–≤–∞–º–∏ –ø—Ä–∏ –ø–æ–±–µ–¥–µ
  if (victory) {
    if (gameState.chapter === "chapter1") {
      changeChapter("chapter2");
    } else if (gameState.chapter === "chapter2") {
      changeChapter("chapter3");
    } else if (gameState.chapter === "chapter3") {
      changeChapter("chapter4");
    } else if (gameState.chapter === "chapter4") {
      changeChapter("chapter5");
    } else if (gameState.chapter === "chapter5") {
      changeChapter("chapter6");
    } else {
      document.querySelector(`#${gameState.chapter}`).classList.add('active');
    }
  } else {
    document.querySelector(`#${gameState.chapter}`).classList.add('active');
  }
  
  gameState.currentEnemy = null;
}

function useCard(index, inBattle = false) {
  if (index >= gameState.cards.hand.length) return;
  
  const card = gameState.cards.hand[index];
  let message = `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–∞—Ä—Ç–∞: ${card.name}. `;
  
  switch(card.id) {
    case "hide":
      message += "–¢—ã –ø—Ä—è—á–µ—à—å—Å—è –æ—Ç –æ–ø–∞—Å–Ω–æ—Å—Ç–∏.";
      if (inBattle) {
        gameState.currentEnemy.health -= 1;
        message += " –í—Ä–∞–≥ –ø–æ–ª—É—á–∞–µ—Ç 1 —É—Ä–æ–Ω –æ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç–∏!";
      }
      break;
    case "leo":
      message += "–õ—ë—à–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ —Ç–µ–±–µ, –¥–∞–≤–∞—è +1 –∫ –±—Ä–æ—Å–∫–∞–º –∫—É–±–∏–∫–∞.";
      gameState.companions.push("–õ–µ–æ");
      gameState.cards.active.push(card);
      break;
    case "food":
      message += "–¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –ø—Ä–∏–ø–∞—Å—ã, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è 2 –µ–¥–∏–Ω–∏—Ü—ã –µ–¥—ã.";
      gameState.food += 2;
      break;
    case "map":
      message += "–ö–∞—Ä—Ç–∞ –∫–ª–∞–¥–±–∏—â–∞ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å.";
      gameState.inventory.push("–ö–∞—Ä—Ç–∞ –∫–ª–∞–¥–±–∏—â–∞");
      renderInventory();
      break;
    case "key":
      message += "–•—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π –∫–ª—é—á —Ç–µ–ø–µ—Ä—å –≤ —Ç–≤–æ—ë–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!";
      gameState.inventory.push("–•—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π –∫–ª—é—á");
      renderInventory();
      break;
    case "sword":
      message += "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ç–≤–æ—é —Å–∏–ª—É –Ω–∞ 1.";
      gameState.strength += 1;
      gameState.cards.active.push(card);
      break;
    case "shield":
      message += "–õ–∏—Å—Ç-—â–∏—Ç —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ç–≤–æ—é –∑–∞—â–∏—Ç—É.";
      gameState.cards.active.push(card);
      break;
  }
  
  // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–±—Ä–æ—Å
  gameState.cards.hand.splice(index, 1);
  gameState.cards.discard.push(card);
  
  addToStory(message, true);
  renderCards();
  updateResources();
  
  // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –≤ –±–æ—é, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  if (inBattle) {
    const enemyHealthEl = document.getElementById('enemy-health');
    if (enemyHealthEl) enemyHealthEl.textContent = Math.max(0, gameState.currentEnemy.health);
    
    const playerHealthEl = document.getElementById('player-health');
    if (playerHealthEl) playerHealthEl.textContent = gameState.health;
    
    renderBattleCards();
  }
}

function addToStory(text, isNewEntry = false) {
  const storyLogElement = document.getElementById('story-log');
  if (!storyLogElement) return;
  
  if (isNewEntry) {
    const entry = document.createElement('div');
    entry.className = 'story-entry';
    entry.textContent = text;
    storyLogElement.appendChild(entry);
  } else {
    const lastEntry = storyLogElement.lastChild;
    if (lastEntry) {
      lastEntry.textContent += ' ' + text;
    } else {
      addToStory(text, true);
    }
  }
  storyLogElement.scrollTop = storyLogElement.scrollHeight;
}

function updateResources() {
  ['health', 'energy', 'coins', 'food', 'knowledge', 'strength'].forEach(res => {
    const valueEl = document.querySelector(`#${res} .resource-value`);
    if (valueEl) valueEl.textContent = gameState[res];
    const maxEl = document.querySelector(`#${res} .resource-max`);
    if (maxEl && gameState[`max${res.charAt(0).toUpperCase() + res.slice(1)}`]) {
      maxEl.textContent = gameState[`max${res.charAt(0).toUpperCase() + res.slice(1)}`];
    }
  });
}

function drawCard() {
  if (gameState.cards.deck.length === 0) {
    if (gameState.cards.discard.length === 0) return false;
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–±—Ä–æ—Å –≤ –∫–æ–ª–æ–¥—É
    gameState.cards.deck = [...gameState.cards.discard];
    gameState.cards.discard = [];
    addToStory("–ö–æ–ª–æ–¥–∞ –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∞–Ω–∞ –∑–∞–Ω–æ–≤–æ!", true);
  }

  const card = gameState.cards.deck.pop();
  gameState.cards.hand.push(card);
  renderCards();
  addToStory(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–∞—Ä—Ç–∞: ${card.name} (${card.effect})`, true);
  return true;
}

function renderCards() {
  const handContainer = document.getElementById('hand-cards');
  const activeContainer = document.getElementById('active-cards');
  
  if (!handContainer || !activeContainer) return;
  
  handContainer.innerHTML = '';
  activeContainer.innerHTML = '';
  
  gameState.cards.hand.forEach((card, index) => {
    const cardEl = document.createElement('div');
    cardEl.className = 'card-item';
    cardEl.textContent = card.name;
    cardEl.title = card.effect;
    cardEl.onclick = () => useCard(index);
    handContainer.appendChild(cardEl);
  });
  
  gameState.cards.active.forEach((card, index) => {
    const cardEl = document.createElement('div');
    cardEl.className = 'card-item';
    cardEl.textContent = card.name;
    cardEl.title = card.effect;
    activeContainer.appendChild(cardEl);
  });
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
function renderInventory() {
  const inventoryContainer = document.getElementById('inventory-items');
  if (!inventoryContainer) return;
  
  inventoryContainer.innerHTML = '';
  
  if (gameState.inventory.length === 0) {
    inventoryContainer.innerHTML = '<p>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</p>';
    return;
  }
  
  // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  const uniqueItems = [...new Set(gameState.inventory)];
  
  uniqueItems.forEach(item => {
    const itemEl = document.createElement('div');
    itemEl.className = 'inventory-item';
    itemEl.textContent = item;
    inventoryContainer.appendChild(itemEl);
  });
}